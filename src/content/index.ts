// Content Script for GitHub Translator Extension

import { getIssueTitles, detectPageType, waitForDOM, extractAndReplaceTitles, extractAndTranslateTitles, restoreTitles } from '../core/dom-extractor';

console.log('üöÄ Hello GitHub Translator - Content Script Loaded!');

// Extension ÏÉÅÌÉú Ï∂îÏ†Å
let isTranslatorEnabled = true;
let currentTitles: any[] = [];

// GitHub ÌéòÏù¥ÏßÄÏóêÏÑú Ïã§ÌñâÎêòÎäîÏßÄ ÌôïÏù∏
if (window.location.hostname === 'github.com') {
  console.log('‚úÖ Running on GitHub.com');
  console.log('üìç Current URL:', window.location.href);
  
  // Sprint 2.1: Ï†úÎ™© Ï∂îÏ∂ú Î∞è Ï∂úÎ†• Ìï®Ïàò
  const extractAndLogTitles = async () => {
    try {
      // DOMÏù¥ ÏôÑÏ†ÑÌûà Î°úÎìúÎê† ÎïåÍπåÏßÄ ÎåÄÍ∏∞
      await waitForDOM();
      
      // ÌéòÏù¥ÏßÄ ÌÉÄÏûÖ Í∞êÏßÄ
      const pageInfo = detectPageType();
      console.log(`üìÑ Page type detected: ${pageInfo.type}`);
      
      // Extension ÏÑ§Ï†ï ÌôïÏù∏
      const settings = await chrome.storage.sync.get(['translatorEnabled']);
      isTranslatorEnabled = settings.translatorEnabled !== false;
      
      if (!isTranslatorEnabled) {
        console.log('‚è∏Ô∏è Translator disabled - only extracting titles');
        // ÎπÑÌôúÏÑ±Ìôî ÏÉÅÌÉúÏóêÏÑúÎäî Ï†úÎ™©Îßå Ï∂îÏ∂ú
        currentTitles = getIssueTitles();
        return;
      }
      
      // Check if API key is available for real translation
      const storage = await chrome.storage.sync.get(['openaiApiKey']);
      const hasApiKey = !!storage.openaiApiKey;
      
      console.log('üîç API Key Debug:', { 
        storage, 
        hasApiKey, 
        apiKeyExists: !!storage.openaiApiKey,
        apiKeyLength: storage.openaiApiKey ? storage.openaiApiKey.length : 0,
        apiKeyPrefix: storage.openaiApiKey ? storage.openaiApiKey.substring(0, 8) + '...' : 'none'
      });
      
      if (hasApiKey) {
        console.log('üéØ Sprint 3.5 - Real Translation Starting...');
        try {
          currentTitles = await extractAndTranslateTitles();
        } catch (error) {
          console.error('‚ùå Real translation failed, falling back to demo mode:', error);
          currentTitles = extractAndReplaceTitles('HELLO GITHUB TRANSLATOR');
        }
      } else {
        console.log('üéØ Sprint 2.3 - Demo Mode (No API Key) - Using Placeholder...');
        currentTitles = extractAndReplaceTitles('HELLO GITHUB TRANSLATOR');
      }
      
      if (currentTitles.length > 0) {
        console.log('üéâ Title Processing Successful!');
        console.log(`üìã Found and processed ${currentTitles.length} GitHub issue/PR titles`);
        
        // ÏõêÎ≥∏ Ï†úÎ™©Îì§ÏùÑ ÏΩòÏÜîÏóê Ï∂úÎ†• (Sprint 2.4)
        console.log('üìú Original titles before replacement:');
        currentTitles.forEach((title, index) => {
          console.log(`üìå ${index + 1}. ${title.originalText || title.text}`);
        });
      } else {
        console.log('üì≠ No titles found on this page');
      }
      
    } catch (error) {
      console.error('‚ùå Error extracting/replacing titles:', error);
    }
  };
  
  // Ï†úÎ™© Î≥µÏõê Ìï®Ïàò
  const restoreOriginalTitles = () => {
    if (currentTitles.length > 0) {
      console.log('üîÑ Restoring original titles...');
      const restoredCount = restoreTitles();
      console.log(`‚úÖ Restored ${restoredCount} titles to original text`);
    }
  };
  
  // Demo: Background ScriptÏôÄ ÌÜµÏã† ÌÖåÏä§Ìä∏
  const testBackgroundCommunication = async () => {
    try {
      const response = await chrome.runtime.sendMessage({ 
        action: 'demo', 
        pageType: detectPageType().type 
      });
      console.log('‚úÖ Background communication successful:', response);
    } catch (error) {
      console.error('‚ùå Background communication failed:', error);
    }
  };
  
  // ÌéòÏù¥ÏßÄ Î°úÎìú ÌõÑ Ïã§Ìñâ
  const initializeExtension = async () => {
    await testBackgroundCommunication();
    
    // Sprint 2.1, 2.3: Ï†úÎ™© Ï∂îÏ∂ú Î∞è ÍµêÏ≤¥ Ïã§Ìñâ
    setTimeout(async () => {
      await extractAndLogTitles();
    }, 2000); // GitHubÏùò ÎèôÏ†Å Î°úÎî©ÏùÑ ÏúÑÌï¥ 2Ï¥à ÎåÄÍ∏∞ (CSS Modules Î°úÎî© ÏãúÍ∞Ñ Í≥†Î†§)
  };
  
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeExtension);
  } else {
    initializeExtension();
  }
  
  // Sprint 2.2: Ìñ•ÏÉÅÎêú MutationObserver for Live Detection
  let currentUrl = window.location.href;
  let observerTimeout: NodeJS.Timeout | null = null;
  
  const observer = new MutationObserver((mutations) => {
    // URL Î≥ÄÍ≤Ω Í∞êÏßÄ (GitHub SPA ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò)
    if (currentUrl !== window.location.href) {
      currentUrl = window.location.href;
      console.log('üîÑ Page navigation detected:', currentUrl);
      
      // Ïù¥Ï†Ñ Ï†úÎ™©Îì§ Î≥µÏõê
      restoreOriginalTitles();
      
      // ÎîîÎ∞îÏö¥Ïä§Îêú Ïû¨Ïã§Ìñâ
      if (observerTimeout) {
        clearTimeout(observerTimeout);
      }
      
      observerTimeout = setTimeout(async () => {
        console.log('üîÑ Re-running extraction after navigation...');
        await extractAndLogTitles();
        testBackgroundCommunication();
      }, 2000); // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÌõÑ 2Ï¥à ÎåÄÍ∏∞
      
      return;
    }
    
    // DOM Î≥ÄÌôî Í∞êÏßÄ (ÏÉàÎ°úÏö¥ Ïù¥Ïäà/PR Î°úÎî©)
    let hasRelevantChanges = false;
    
    mutations.forEach((mutation) => {
      if (mutation.type === 'childList') {
        // ÏÉàÎ°úÏö¥ Ïù¥Ïäà/PR Ï†úÎ™© ÏöîÏÜåÍ∞Ä Ï∂îÍ∞ÄÎêòÏóàÎäîÏßÄ ÌôïÏù∏
        mutation.addedNodes.forEach((node) => {
          if (node.nodeType === Node.ELEMENT_NODE) {
            const element = node as Element;
            
            // GitHub Ïù¥Ïäà/PR Í¥ÄÎ†® ÏöîÏÜå Í∞êÏßÄ
            if (
              element.querySelector?.('[class*="IssuePullRequestTitle"]') ||
              element.querySelector?.('[class*="ListItemTitle"]') ||
              element.querySelector?.('.js-issue-title') ||
              element.querySelector?.('a[href*="/issues/"]') ||
              element.querySelector?.('a[href*="/pull/"]') ||
              element.classList?.contains('js-navigation-item') ||
              element.matches?.('[class*="IssuePullRequestTitle"]') ||
              element.matches?.('[class*="ListItemTitle"]')
            ) {
              hasRelevantChanges = true;
              console.log('üîç New GitHub issue/PR elements detected');
            }
          }
        });
      }
    });
    
    // Í¥ÄÎ†® Î≥ÄÌôîÍ∞Ä ÏûàÏùÑ ÎïåÎßå Ïû¨Ïã§Ìñâ
    if (hasRelevantChanges && isTranslatorEnabled) {
      // ÎîîÎ∞îÏö¥Ïä§Îêú Ïû¨Ïã§Ìñâ
      if (observerTimeout) {
        clearTimeout(observerTimeout);
      }
      
      observerTimeout = setTimeout(async () => {
        console.log('üîÑ Re-running extraction due to DOM changes...');
        await extractAndLogTitles();
      }, 1000); // DOM Î≥ÄÌôî ÌõÑ 1Ï¥à ÎåÄÍ∏∞
    }
  });
  
  // Ìñ•ÏÉÅÎêú Í¥ÄÏ∞∞ ÏÑ§Ï†ï
  observer.observe(document.body, {
    childList: true,
    subtree: true,
    attributes: false, // ÏÜçÏÑ± Î≥ÄÌôîÎäî Í¥ÄÏ∞∞ÌïòÏßÄ ÏïäÏùå (ÏÑ±Îä• ÏµúÏ†ÅÌôî)
    characterData: false, // ÌÖçÏä§Ìä∏ Î≥ÄÌôîÎäî Í¥ÄÏ∞∞ÌïòÏßÄ ÏïäÏùå
  });
  
  // ÏÑ§Ï†ï Î≥ÄÍ≤Ω Í∞êÏßÄ
  chrome.storage.onChanged.addListener((changes) => {
    if (changes.translatorEnabled) {
      const newValue = changes.translatorEnabled.newValue !== false;
      
      if (newValue !== isTranslatorEnabled) {
        isTranslatorEnabled = newValue;
        console.log(`üîß Translator ${isTranslatorEnabled ? 'enabled' : 'disabled'}`);
        
        if (isTranslatorEnabled) {
          // ÌôúÏÑ±Ìôî Ïãú Ï†úÎ™© ÍµêÏ≤¥ Ïã§Ìñâ
          setTimeout(async () => {
            await extractAndLogTitles();
          }, 500);
        } else {
          // ÎπÑÌôúÏÑ±Ìôî Ïãú ÏõêÎ≥∏ Ï†úÎ™© Î≥µÏõê
          restoreOriginalTitles();
        }
      }
    }
  });
  
  // Ï†ïÎ¶¨ Ìï®Ïàò
  window.addEventListener('beforeunload', () => {
    if (observerTimeout) {
      clearTimeout(observerTimeout);
    }
    observer.disconnect();
    restoreOriginalTitles(); // ÌéòÏù¥ÏßÄ Ï¢ÖÎ£å Ïãú ÏõêÎ≥∏ Î≥µÏõê
  });
  
  // ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§Î°ú ÌÜ†Í∏Ä (Í∞úÎ∞úÏö©)
  document.addEventListener('keydown', (event) => {
    // Ctrl + Shift + TÎ°ú Ï†úÎ™© ÌÜ†Í∏Ä
    if (event.ctrlKey && event.shiftKey && event.key === 'T') {
      event.preventDefault();
      
      if (currentTitles.length > 0) {
        const hasReplacedTitles = document.querySelector('[data-github-translator="replaced"]');
        
        if (hasReplacedTitles) {
          restoreOriginalTitles();
          console.log('üîÑ Restored titles via keyboard shortcut');
        } else {
          // Check if API key is available for real translation
          chrome.storage.sync.get(['openaiApiKey']).then(async (storage) => {
            const hasApiKey = !!storage.openaiApiKey;
            
            if (hasApiKey) {
              try {
                await extractAndTranslateTitles();
                console.log('üîÑ Translated titles via keyboard shortcut');
              } catch (error) {
                console.error('‚ùå Translation failed via shortcut, using demo mode:', error);
                extractAndReplaceTitles('HELLO GITHUB TRANSLATOR');
              }
            } else {
              extractAndReplaceTitles('HELLO GITHUB TRANSLATOR');
              console.log('üîÑ Replaced titles via keyboard shortcut (Demo Mode)');
            }
          });
        }
      }
    }
  });
  
} else {
  console.log('‚ùå Not running on GitHub.com');
}